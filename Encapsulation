# Encapsulation


# Create a class BankAccount with the following:
# Private attributes __account_holder and __balance (default balance = 0).
# Methods:
# deposit(amount) to add money.
# withdraw(amount) to deduct money if the balance is sufficient.
# get_balance() to return the current balance.

class BankAccount:
    def __init__(self,account_holder,balance=0):
        self.__account_holder = account_holder
        self.__balance = balance

    def get_account_holder(self):
        return self.__account_holder

    def set_account_holder(self,account_holder):
        self.__account_holder = account_holder

    def get_balance(self):
        return self.__balance

    def set_balance(self,balance):
        self.__balance = balance

    def deposit(self,amount):
        return f"The amount deposited is {amount}"

    def withdraw(self,amt,balance):
        if balance > 0:
            bal = balance - amt
            return f"The amount withdrwan is {amt}, total balance remains {bal}"
        else:
            return "Not sufficient balance"

myAcc = BankAccount('Maseera Shaikh')
print(myAcc.get_account_holder())
print(myAcc.get_balance())
myAcc.deposit(5000)
myAcc.withdraw(1000,5000)




print('-------------------------------------------------------')

# Create a class Employee with private attributes __name and __salary.
# Add getter and setter methods for these attributes.
# Ensure the salary cannot be set to a negative value.


class Employee:
    def __init__(self, name,salary):
        self.__name = name
        self.__salary = salary

    def get_salary(self):
        return self.__salary

    def set_salary(self, salary):
        if salary > 0 :
            self.__salary = salary
        else:
            return "Salary cannot be set to 0"

    def get_name(self):
        return self.__name

    def set_name(self, name):
        self.__name = name



emp =Employee('Maseera' ,50000)
print(emp.get_salary())
print(emp.get_name())




# Write a class Car with private attributes __brand, __model, and __year.
# Add a method to return car details as a string.
# Allow updating only the __year attribute using a setter method (with validation that the year should not be in the future).
import datetime
class Car:
    def __init__(self,brand,model,year):
        self.__brand = brand
        self.__model = model
        self.__year =year

    def get_car_details(self):
        return f"The car brand is {self.__brand} , model is {self.__model} , year is {self.__year}"

    def set_year(self,year):
       current_year = datetime.datetime.now().year  # Dynamically get the current year
       if year <= current_year:
           self.__year = year
       else:
           raise ValueError("Year cannot be more than current year")


c = Car('Tata','Indica',2029)
# c.set_year(2025)
print(c.get_car_details())


# Create a class Book with private attributes __title, __author, and __price.
# Write getter and setter methods for all attributes.
# Ensure the price cannot be set to a value less than 0.
class Book:

    def __init__(self,title,author,price):
        self.__title = title
        self.__author = author
        self.__price =price

    def get_title(self):
        return self.__title

    def set_title(self,title):
        self.__title = title

    def get_author(self):
        return self.__author

    def set_author(self,author):
        self.__author = author

    def get_price(self):
        return self.__price

    def set_price(self,price):
        if price == 0:
            raise ValueError("Price cannot be zero")
        else:
            self.__price = price


try:
    book = Book('48 laws of power','Maseera',0)
    book.set_price(0)
    print(book.get_price())
except ValueError as e:
    print(e)



    

        

        


# Write a class Product to represent an item in a store.
# Private attributes: __name, __price, and __quantity.
# Methods:
# calculate_total_cost() to return the product of price and quantity.
# Use setters with validation to ensure price and quantity are non-negative.
class Product:
    def __init__(self, name , price , quantity):
        self.__name = name
        self.__price = price
        self.__quantity = quantity
        

    def calculate_total_cost(self):
         return f"Total price for {self.__quantity} qty of {self.__name} is {self.__price* self.__quantity}"

    def set_price(self,price):
         if price > 0:
             self.__price = price
         else:
             raise ValueError("Price cannot be negative")

    def set_quantity(self,quantity):
          if quantity > 0:
             self.__quantity = quantity
          else:
              raise ValueError("quantity cannot be negative")


try:
    p = Product('Books' ,200,2)
    p.set_price(0)
    print(p.calculate_total_cost(200,2))

except ValueError as e:
    print(e)

